{"ast":null,"code":"const passport = require(\"passport\");\n\nconst passportJWT = require(\"passport-jwt\");\n\nconst ExtractJwt = passportJWT.ExtractJwt;\nconst Strategy = passportJWT.Strategy;\n\nconst config = require(\"./config\");\n\nconst mongoose = require(\"../models/User\");\n\nconst User = mongoose.model(\"User\");\nconst params = {\n  secretOrKey: config.jwtSecret,\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken()\n};\n\nmodule.exports = function () {\n  let strategy = new Strategy(params, (payload, callback) => {\n    let user = User.findById(payload.id) || null;\n\n    if (user) {\n      return callback(null, {\n        id: user.id\n      });\n    } else {\n      return callback(new Error(\"User not found\"), null);\n    }\n  });\n  passport.use(strategy);\n  return {\n    initialize: function () {\n      return passport.initialize();\n    },\n    authenticate: function () {\n      return passport.authenticate(\"jwt\", {\n        session: false\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/Tenley/SEI/Projects/beatles-mern-project/beatles-mern/src/config/passport.js"],"names":["passport","require","passportJWT","ExtractJwt","Strategy","config","mongoose","User","model","params","secretOrKey","jwtSecret","jwtFromRequest","fromAuthHeaderAsBearerToken","module","exports","strategy","payload","callback","user","findById","id","Error","use","initialize","authenticate","session"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAME,UAAU,GAAGD,WAAW,CAACC,UAA/B;AACA,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;;AAEA,MAAMC,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMM,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAe,MAAf,CAAb;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,WAAW,EAAEL,MAAM,CAACM,SADP;AAEbC,EAAAA,cAAc,EAAET,UAAU,CAACU,2BAAX;AAFH,CAAf;;AAKAC,MAAM,CAACC,OAAP,GAAiB,YAAY;AAC3B,MAAIC,QAAQ,GAAG,IAAIZ,QAAJ,CAAaK,MAAb,EAAqB,CAACQ,OAAD,EAAUC,QAAV,KAAuB;AACzD,QAAIC,IAAI,GAAGZ,IAAI,CAACa,QAAL,CAAcH,OAAO,CAACI,EAAtB,KAA6B,IAAxC;;AACA,QAAIF,IAAJ,EAAU;AACR,aAAOD,QAAQ,CAAC,IAAD,EAAO;AAAEG,QAAAA,EAAE,EAAEF,IAAI,CAACE;AAAX,OAAP,CAAf;AACD,KAFD,MAEO;AACL,aAAOH,QAAQ,CAAC,IAAII,KAAJ,CAAU,gBAAV,CAAD,EAA8B,IAA9B,CAAf;AACD;AACF,GAPc,CAAf;AASAtB,EAAAA,QAAQ,CAACuB,GAAT,CAAaP,QAAb;AAEA,SAAO;AACLQ,IAAAA,UAAU,EAAE,YAAY;AACtB,aAAOxB,QAAQ,CAACwB,UAAT,EAAP;AACD,KAHI;AAILC,IAAAA,YAAY,EAAE,YAAY;AACxB,aAAOzB,QAAQ,CAACyB,YAAT,CAAsB,KAAtB,EAA6B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA7B,CAAP;AACD;AANI,GAAP;AAQD,CApBD","sourcesContent":["const passport = require(\"passport\");\nconst passportJWT = require(\"passport-jwt\");\nconst ExtractJwt = passportJWT.ExtractJwt;\nconst Strategy = passportJWT.Strategy;\n\nconst config = require(\"./config\");\n\nconst mongoose = require(\"../models/User\");\nconst User = mongoose.model(\"User\");\n\nconst params = {\n  secretOrKey: config.jwtSecret,\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n};\n\nmodule.exports = function () {\n  let strategy = new Strategy(params, (payload, callback) => {\n    let user = User.findById(payload.id) || null;\n    if (user) {\n      return callback(null, { id: user.id });\n    } else {\n      return callback(new Error(\"User not found\"), null);\n    }\n  });\n\n  passport.use(strategy);\n\n  return {\n    initialize: function () {\n      return passport.initialize();\n    },\n    authenticate: function () {\n      return passport.authenticate(\"jwt\", { session: false });\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}